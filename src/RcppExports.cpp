// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// next_combination
arma::rowvec next_combination(int n, arma::rowvec first_comb);
RcppExport SEXP _HyperSBM_next_combination(SEXP nSEXP, SEXP first_combSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type first_comb(first_combSEXP);
    rcpp_result_gen = Rcpp::wrap(next_combination(n, first_comb));
    return rcpp_result_gen;
END_RCPP
}
// next_combination_rep
arma::rowvec next_combination_rep(int n, arma::rowvec first_comb);
RcppExport SEXP _HyperSBM_next_combination_rep(SEXP nSEXP, SEXP first_combSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type first_comb(first_combSEXP);
    rcpp_result_gen = Rcpp::wrap(next_combination_rep(n, first_comb));
    return rcpp_result_gen;
END_RCPP
}
// next_permutation
arma::rowvec next_permutation(arma::rowvec first_perm);
RcppExport SEXP _HyperSBM_next_permutation(SEXP first_permSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::rowvec >::type first_perm(first_permSEXP);
    rcpp_result_gen = Rcpp::wrap(next_permutation(first_perm));
    return rcpp_result_gen;
END_RCPP
}
// bin_coeff
int bin_coeff(const int n, const int m);
RcppExport SEXP _HyperSBM_bin_coeff(SEXP nSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const int >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(bin_coeff(n, m));
    return rcpp_result_gen;
END_RCPP
}
// find_comb
int find_comb(int n, arma::uvec comb);
RcppExport SEXP _HyperSBM_find_comb(SEXP nSEXP, SEXP combSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type comb(combSEXP);
    rcpp_result_gen = Rcpp::wrap(find_comb(n, comb));
    return rcpp_result_gen;
END_RCPP
}
// find_comb_rep
int find_comb_rep(int n, arma::uvec comb);
RcppExport SEXP _HyperSBM_find_comb_rep(SEXP nSEXP, SEXP combSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type comb(combSEXP);
    rcpp_result_gen = Rcpp::wrap(find_comb_rep(n, comb));
    return rcpp_result_gen;
END_RCPP
}
// compute_Y
Rcpp::List compute_Y(int n, int M, Rcpp::List list_edges);
RcppExport SEXP _HyperSBM_compute_Y(SEXP nSEXP, SEXP MSEXP, SEXP list_edgesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type list_edges(list_edgesSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_Y(n, M, list_edges));
    return rcpp_result_gen;
END_RCPP
}
// compute_B
Rcpp::List compute_B(int n, int M, arma::mat tau, Rcpp::List Y, Rcpp::List all_latents, int model, int n_threads);
RcppExport SEXP _HyperSBM_compute_B(SEXP nSEXP, SEXP MSEXP, SEXP tauSEXP, SEXP YSEXP, SEXP all_latentsSEXP, SEXP modelSEXP, SEXP n_threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type all_latents(all_latentsSEXP);
    Rcpp::traits::input_parameter< int >::type model(modelSEXP);
    Rcpp::traits::input_parameter< int >::type n_threads(n_threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_B(n, M, tau, Y, all_latents, model, n_threads));
    return rcpp_result_gen;
END_RCPP
}
// compute_pi
arma::rowvec compute_pi(arma::mat tau);
RcppExport SEXP _HyperSBM_compute_pi(SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_pi(tau));
    return rcpp_result_gen;
END_RCPP
}
// compute_ELBO
double compute_ELBO(int M, arma::mat tau, arma::rowvec pi, Rcpp::List Y, Rcpp::List B);
RcppExport SEXP _HyperSBM_compute_ELBO(SEXP MSEXP, SEXP tauSEXP, SEXP piSEXP, SEXP YSEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type pi(piSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_ELBO(M, tau, pi, Y, B));
    return rcpp_result_gen;
END_RCPP
}
// compute_tau_par
arma::mat compute_tau_par(int M, arma::mat tau_prec, arma::rowvec pi, Rcpp::List Y, Rcpp::List B, int n_threads);
RcppExport SEXP _HyperSBM_compute_tau_par(SEXP MSEXP, SEXP tau_precSEXP, SEXP piSEXP, SEXP YSEXP, SEXP BSEXP, SEXP n_threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type tau_prec(tau_precSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type pi(piSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type B(BSEXP);
    Rcpp::traits::input_parameter< int >::type n_threads(n_threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_tau_par(M, tau_prec, pi, Y, B, n_threads));
    return rcpp_result_gen;
END_RCPP
}
// VE_step_par
Rcpp::List VE_step_par(int M, arma::mat tau_old, arma::rowvec pi, Rcpp::List Y, Rcpp::List B, double tol, int maxit, int n_threads);
RcppExport SEXP _HyperSBM_VE_step_par(SEXP MSEXP, SEXP tau_oldSEXP, SEXP piSEXP, SEXP YSEXP, SEXP BSEXP, SEXP tolSEXP, SEXP maxitSEXP, SEXP n_threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type tau_old(tau_oldSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type pi(piSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type B(BSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< int >::type n_threads(n_threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(VE_step_par(M, tau_old, pi, Y, B, tol, maxit, n_threads));
    return rcpp_result_gen;
END_RCPP
}
// VEM_par
Rcpp::List VEM_par(int M, int Q, int n, arma::mat tau_old, Rcpp::List all_latents, Rcpp::List Y, double tol, int maxit_VEM, int maxit_FP, int model, int start, bool print, int n_threads);
RcppExport SEXP _HyperSBM_VEM_par(SEXP MSEXP, SEXP QSEXP, SEXP nSEXP, SEXP tau_oldSEXP, SEXP all_latentsSEXP, SEXP YSEXP, SEXP tolSEXP, SEXP maxit_VEMSEXP, SEXP maxit_FPSEXP, SEXP modelSEXP, SEXP startSEXP, SEXP printSEXP, SEXP n_threadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< int >::type Q(QSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type tau_old(tau_oldSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type all_latents(all_latentsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type Y(YSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type maxit_VEM(maxit_VEMSEXP);
    Rcpp::traits::input_parameter< int >::type maxit_FP(maxit_FPSEXP);
    Rcpp::traits::input_parameter< int >::type model(modelSEXP);
    Rcpp::traits::input_parameter< int >::type start(startSEXP);
    Rcpp::traits::input_parameter< bool >::type print(printSEXP);
    Rcpp::traits::input_parameter< int >::type n_threads(n_threadsSEXP);
    rcpp_result_gen = Rcpp::wrap(VEM_par(M, Q, n, tau_old, all_latents, Y, tol, maxit_VEM, maxit_FP, model, start, print, n_threads));
    return rcpp_result_gen;
END_RCPP
}
// compute_LogLik
double compute_LogLik(int n, int M, int Q, arma::mat tau, arma::rowvec pi, Rcpp::List Y, Rcpp::List B);
RcppExport SEXP _HyperSBM_compute_LogLik(SEXP nSEXP, SEXP MSEXP, SEXP QSEXP, SEXP tauSEXP, SEXP piSEXP, SEXP YSEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    Rcpp::traits::input_parameter< int >::type Q(QSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type pi(piSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_LogLik(n, M, Q, tau, pi, Y, B));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_HyperSBM_next_combination", (DL_FUNC) &_HyperSBM_next_combination, 2},
    {"_HyperSBM_next_combination_rep", (DL_FUNC) &_HyperSBM_next_combination_rep, 2},
    {"_HyperSBM_next_permutation", (DL_FUNC) &_HyperSBM_next_permutation, 1},
    {"_HyperSBM_bin_coeff", (DL_FUNC) &_HyperSBM_bin_coeff, 2},
    {"_HyperSBM_find_comb", (DL_FUNC) &_HyperSBM_find_comb, 2},
    {"_HyperSBM_find_comb_rep", (DL_FUNC) &_HyperSBM_find_comb_rep, 2},
    {"_HyperSBM_compute_Y", (DL_FUNC) &_HyperSBM_compute_Y, 3},
    {"_HyperSBM_compute_B", (DL_FUNC) &_HyperSBM_compute_B, 7},
    {"_HyperSBM_compute_pi", (DL_FUNC) &_HyperSBM_compute_pi, 1},
    {"_HyperSBM_compute_ELBO", (DL_FUNC) &_HyperSBM_compute_ELBO, 5},
    {"_HyperSBM_compute_tau_par", (DL_FUNC) &_HyperSBM_compute_tau_par, 6},
    {"_HyperSBM_VE_step_par", (DL_FUNC) &_HyperSBM_VE_step_par, 8},
    {"_HyperSBM_VEM_par", (DL_FUNC) &_HyperSBM_VEM_par, 13},
    {"_HyperSBM_compute_LogLik", (DL_FUNC) &_HyperSBM_compute_LogLik, 7},
    {NULL, NULL, 0}
};

RcppExport void R_init_HyperSBM(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
